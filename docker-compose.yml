version: '3.8'

services:

  postgres:
    build:
      dockerfile: docker/postgres/Dockerfile
    container_name: 'sb-learning-postgres'
    hostname: 'sb-learning-postgres'
    ports:
      - "${POSTGRES_EXTERNAL_PORT}:5432"
    environment:
      POSTGRES_MULTIPLE_DATABASES: ${DB_LIST}
      POSTGRES_USER: ${DATABASE_USERNAME}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
    volumes:
      - ./.postgresql:/var/lib/postgresql/data
      - ./docker/postgres:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-d", "db_prod"]
      timeout: 20s
      retries: 10
    restart: unless-stopped
    networks:
      - spring-boot-learning

  keycloak:
    image: spring-boot-learning-keycloak:1.0.0
    container_name: 'sb-learning-keycloak'
    command:
      - start
      - --optimized
      - --db-url=jdbc:postgresql://sb-learning-postgres:5432/${KEYCLOAK_DB_NAME}?serverTimezone=UTC
      - --db-username=${DATABASE_USERNAME}
      - --db-password=${DATABASE_PASSWORD}
      - --https-key-store-file=/opt/keycloak/conf/server.keystore
      - --https-key-store-password=${KEYCLOAK_KEYSTORE_PASSWORD}
      - --proxy-headers=forwarded
      - --hostname=https://${KEYCLOAK_HOST}
    ports:
      - "${KEYCLOAK_EXTERNAL_PORT}:8443"
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      DATABASE_USERNAME: ${DATABASE_USERNAME}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      JAVA_OPTS_KC_HEAP: "-XX:MaxHeapFreeRatio=40 -XX:MaxRAMPercentage=65"
    healthcheck:
      test:
        ["CMD", "curl", "-f", "https://localhost:8443/"]
      interval: 5s
      timeout: 5s
      retries: 1
      start_period: 6s
    restart: unless-stopped
    networks:
      - spring-boot-learning

  nginx-proxy:
    image: jwilder/nginx-proxy
    container_name: nginx-proxy
    ports:
      - "80:80"
      - "443:443"
    environment:
      TRUST_DOWNSTREAM_PROXY: true
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - ./nginx/certs:/etc/nginx/certs
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx:/var/lib/www
    networks:
      - spring-boot-learning


  zookeeper:
    image: quay.io/strimzi/kafka:0.23.0-kafka-2.8.0
    command: [
      "sh", "-c",
      "bin/zookeeper-server-start.sh config/zookeeper.properties"
    ]
    ports:
      - "12181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 9092
      ZOOKEEPER_TICK_TIME: 2000
      LOG_DIR: /tmp/logs
    networks:
      - spring-boot-learning
    healthcheck:
      test: [ "CMD", "nc", "-vz", "localhost", "2181" ]
      interval: 2s
      timeout: 10s
      retries: 50

  kafka:
    image: quay.io/strimzi/kafka:0.23.0-kafka-2.8.0
    command: [
      "bin/kafka-server-start.sh",
      "config/server.properties",
      "--override",
      "listeners=${KAFKA_LISTENERS}",
      "--override",
      "advertised.listeners=${KAFKA_ADVERTISED_LISTENERS}",
      "--override",
      "zookeeper.connect=${KAFKA_ZOOKEEPER_CONNECT}"
    ]
    hostname: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    links:
      - zookeeper
    ports:
      - "${KAFKA_EXTERNAL_PORT}:9092"
    environment:
      LOG_DIR: "/tmp/logs"
      KAFKA_M_R_B: "1147483648"
      KAFKA_NUM_PARTITIONS: "10"
    networks:
      - spring-boot-learning

networks:
  spring-boot-learning:
    name: sb-learning
    driver: bridge
